{"version":3,"file":"static/js/544.4cb814ad.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Pagination/Pagination.jsx","pages/Home/Home.jsx","services/movieApi.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\"\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 280px);\n  justify-content: center;\n  gap: 20px;\n  padding: 20px 0;\n  /* background-color: #fff; */\n`\nexport const MovieItem = styled.li`\n    margin: 0 auto;\n    border: 1px solid lightgray;\n    width: 280px;\n  border-radius: 13px;\n  transition: box-shadow 250ms ease-in-out, border 150ms ease-in-out,transform 250ms ease-in-out ;\n  :hover{\n    box-shadow: 0px 2px 8px 0px rgba(0, 0, 0, 0.6);\n    transform: scale(1.05);\n  }\n    > a {\n        text-overflow: clip;\n    text-decoration: none;\n  }\n`\nexport const StyledLink = styled(Link)`\n    object-fit: cover;\n    overflow: hidden;\n    width: 280px;  \n    display: flex;\n    flex-direction:column;\n    border-radius: 13px;\n    color:black;\n    > span {\n    padding-left: 10px;\n    padding-bottom: 3px;\n  }    \n`\nexport const Poster = styled.img`\n    width: 280px;\n    height: 420px;\n    margin-bottom:10px;\n    object-fit: cover;\n    overflow: hidden;\n`\n","import PropTypes from 'prop-types';\nimport { List, Poster, StyledLink, MovieItem } from \"./MoviesList.styled\"\nimport {useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ Movies }) => {\n    const location = useLocation();\n    return (\n            <List>\n                {Movies.length > 0 && Movies.map(movie => {\n                    return <MovieItem key={movie.id}>\n                        <StyledLink to={`/movies/${movie.id}`} state={{from:location}}>\n                            <Poster src={movie.poster_path === null\n                                ? 'https://dummyimage.com/400x600/7d7d7d/fff.jpg&text=image+not+found'\n                                : `https://image.tmdb.org/t/p/w400/${movie.poster_path}`}\n                                alt={movie.title} />\n                            <span> {movie.title}</span>\n                        </StyledLink>\n                    </MovieItem>\n                })}\n            </List>\n    )\n}\n\nMoviesList.propTypes = {\n    Movies: PropTypes.array.isRequired,\n  };\n\nexport default MoviesList","import ReactPaginate from \"react-paginate\";\nimport './Pagination.css';\n\nfunction Pagination({ currentPage, setPage, total_pages  }) {\n    const handlePageClick = event => {\n        setPage({ page: event.selected + 1 });\n      };\n    return (\n        <>\n            <ReactPaginate\n                nextLabel=\">\"\n                onPageChange={handlePageClick }\n                pageRangeDisplayed={3}\n                marginPagesDisplayed={2}\n                pageCount={total_pages}\n                forcePage={currentPage}\n                previousLabel=\"<\"\n                pageClassName=\"page-item\"\n                pageLinkClassName=\"page-link\"\n                previousClassName=\"page-item\"\n                previousLinkClassName=\"page-link\"\n                nextClassName=\"page-item\"\n                nextLinkClassName=\"page-link\"\n                breakLabel=\"...\"\n                breakClassName=\"page-item\"\n                breakLinkClassName=\"page-link\"\n                containerClassName=\"pagination\"\n                activeClassName=\"active\"\n                renderOnZeroPageCount={null}\n            />\n        </>\n    )\n}\n\nexport default Pagination;","import { useEffect, useState, Suspense } from \"react\"\nimport Pagination from \"components/Pagination/Pagination\"\nimport { toast } from \"react-toastify\";\n\nimport MoviesList from \"components/MoviesList/MoviesList\"\nimport { getTrendMovies } from \"services/movieApi\"\nimport { useSearchParams } from 'react-router-dom';\n\nconst customId = \"custom-id-yes\";\n\nconst Home = () => {\n    const [total_pages, setTotal_pages] = useState(2)\n    const [responsePagination, setResponsePagination] = useState(false)\n    const [trendMovies, setTrendMovies] = useState([])\n    const [checkResponse, setCheckResponse] = useState(false)\n    const [title, setTitle] = useState(false)\n    const [searchParams, setSearchParams] = useSearchParams();\n     const pageParam = Number(searchParams.get('page') ?? 1);\n\n    console.log(trendMovies)    \n  \n\n    useEffect(() => {\n        async function getMovies() {\n            try {\n                const response = await getTrendMovies(pageParam)\n                setTrendMovies(() => [...response.results])\n                setTotal_pages(response.total_pages)\n                // console.log(total_pages)\n                if (pageParam === 1 ) {\n                toast.success(`We found total results ${response.total_results}`\n                , { toastId: customId, position: \"top-left\", });}\n                \n                if (trendMovies.length !== 0) {\n                    return setCheckResponse(true);                                 \n                  }\n                if (response.total_pages !== 0) {\n                    setResponsePagination(true)\n                }\n                if (response.total_pages === 0) {\n                    setResponsePagination(false)\n                }                \n            } catch (e) {\n                console.error(e)\n                if (!checkResponse){\n                    toast.error('No respoce from server'        \n                    ,        { toastId: customId });\n                    setTitle(true);\n                }\n          }    \n       }\n        getMovies()\n        return \n    },[pageParam, total_pages, trendMovies.length, checkResponse]   \n    )\n               \n    return (\n        <>\n            {responsePagination && <Pagination currentPage={pageParam-1} total_pages={total_pages} setPage={setSearchParams} />}\n            <MoviesList Movies={trendMovies}  />                       \n            {responsePagination && <Pagination currentPage={pageParam-1} total_pages={total_pages} setPage={setSearchParams} />}\n            <Suspense >\n            {title && <h1 style={{ textAlign: \"center\" }}>Sorry, try again later</h1>}\n            </Suspense>\n        </>        \n    )\n}\n\nexport default Home;","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f87210516a7f6fda7a5c975f08793382';\nconst setLanguage = 'en-US'\n\nexport const getTrendMovies = async (page = 1) => {\n  try { \n    const response = await axios.get(\n        `${BASE_URL}trending/movie/day`, {\n            params: {\n              api_key: API_KEY,\n              language: setLanguage,\n              page: page,\n            },\n          });   \n    console.log(response);\n    return response.data; \n  } catch (err) {\n    throw new Error(err.message);\n  }   \n} \n\nexport const getMovieDetails = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }  \n};\n  \nexport const getMovieCredits = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.cast;\n  } catch (err) {\n    throw new Error(err.message);\n  } \n};\n  \nexport const getMovieReviews = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.results;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n  \nexport const getSearchMovie = async (query, page = 1) => {    \n  try { \n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n        query: query,\n        page: page,\n      },\n    });\n    console.log(response.data);    \n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n"],"names":["List","styled","MovieItem","StyledLink","Link","Poster","Movies","location","useLocation","length","map","movie","to","id","state","from","src","poster_path","alt","title","currentPage","setPage","total_pages","nextLabel","onPageChange","event","page","selected","pageRangeDisplayed","marginPagesDisplayed","pageCount","forcePage","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","customId","useState","setTotal_pages","responsePagination","setResponsePagination","trendMovies","setTrendMovies","checkResponse","setCheckResponse","setTitle","useSearchParams","searchParams","setSearchParams","pageParam","Number","get","console","log","useEffect","getTrendMovies","response","results","toast","total_results","toastId","position","error","getMovies","Suspense","style","textAlign","BASE_URL","API_KEY","setLanguage","axios","params","api_key","language","data","Error","message","getMovieDetails","getMovieCredits","cast","getMovieReviews","getSearchMovie","query"],"sourceRoot":""}