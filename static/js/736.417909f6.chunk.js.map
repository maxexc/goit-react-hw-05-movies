{"version":3,"file":"static/js/736.417909f6.chunk.js","mappings":"kRAEaA,E,QAAOC,GAAAA,GAAH,qR,6BCQXC,EAAW,gBAEF,SAASC,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEwBC,EAAAA,EAAAA,IAAiBH,GAFzC,UAGyB,KADfN,EAFV,QAGcU,OAHd,uBAIMP,GAAS,GAJf,kBAKaQ,EAAAA,GAAAA,KAAW,oDAClB,CAACC,QAASf,KANhB,OAQII,EAASD,GARb,kDAUIa,QAAQC,IAAR,MAVJ,yBAYIT,GAAU,GAZd,8EADc,uBAAC,WAAD,wBAgBdU,EACD,GAAE,CAACT,KAGF,gCACGN,IACC,SAACL,EAAD,UACGK,EAAMgB,KAAI,SAAAC,GAAI,OACb,2BACE,gBACEC,IACED,EAAKE,aAAL,yCACsCF,EAAKE,cAEvC,wHAENC,IAAKH,EAAKI,QAEZ,wBAAKJ,EAAKI,QACV,uCAAeJ,EAAKK,eAXbL,EAAKM,QADD,OAiBnB,SAAC,KAAD,CAAgBC,UAAW,IAAMC,SAAS,aAAaC,MAAM,UAC5DxB,IAAS,8DACTE,IAAU,SAACuB,EAAA,QAAD,MAGhB,C,mMC7DKC,EAAW,gCACXC,EAAU,mCACVC,EAAc,QAEPC,EAAc,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEHC,EAAAA,EAAAA,IAAA,UAChBL,EADgB,sBACc,CAC7BM,OAAQ,CACNC,QAASN,EACTO,SAAUN,EACVE,KAAMA,KAPU,cAEpBK,EAFoB,OAU1BxB,QAAQC,IAAIuB,GAVc,kBAWnBA,EAASC,MAXU,sCAapB,IAAIC,MAAM,KAAIC,SAbM,yDAAH,qDAiBdC,EAAe,mCAAG,WAAMC,GAAN,gGAEJT,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8Bc,GAAM,CACzDR,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,MARW,sCAUrB,IAAIC,MAAM,KAAIC,SAVO,yDAAH,sDAcf/B,EAAe,mCAAG,WAAMiC,GAAN,gGAEJT,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8Bc,EAA9B,YAA4C,CACjER,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,KAAKrB,MARM,sCAUrB,IAAIsB,MAAM,KAAIC,SAVO,yDAAH,sDAcfG,EAAe,mCAAG,WAAMD,GAAN,gGAEJT,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8Bc,EAA9B,YAA4C,CACjER,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,KAAKM,SARM,sCAUrB,IAAIL,MAAM,KAAIC,SAVO,yDAAH,sDAcfK,EAAc,mCAAG,WAAOC,GAAP,4FAAcd,EAAd,+BAAqB,EAArB,kBAEHC,EAAAA,EAAAA,IAAA,UAAaL,EAAb,gBAAqC,CAC1DM,OAAQ,CACNC,QAASN,EACTO,SAAUN,EACVgB,MAAOA,EACPd,KAAMA,KAPgB,cAEpBK,EAFoB,OAU1BxB,QAAQC,IAAIuB,EAASC,MAVK,kBAWnBD,EAASC,MAXU,sCAapB,IAAIC,MAAM,KAAIC,SAbM,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 100px);\n  justify-content: center;\n  gap: 20px;\n  padding: 20px 0;\n  margin-right: 10px;\n  >li {\n    list-style: none;\n    >img {\n      width: 100px;\n      height: 150px;\n    }\n  }\n`;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { List } from './Cast.styled';\nimport Loader from 'components/Loader/Loader';\n\nimport { getMovieCredits } from 'services/movieApi';\n\nconst customId = \"custom-id-yes\";\n\nexport default function Cast() {\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(true);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCasts() {\n      try {\n        const casts = await getMovieCredits (movieId);\n        if (casts.length === 0) {\n          setError(true);\n          return toast.warn('Ooops, there are no cast! Please, try again later',\n          {toastId: customId});\n        }\n        setCasts(casts);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    }\n    fetchCasts();\n  }, [movieId]);\n\n  return (\n    <>\n      {casts && (\n        <List>\n          {casts.map(cast => (\n            <li key={cast.cast_id}>\n              <img\n                src={\n                  cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${cast.profile_path}`\n                    // : 'https://via.placeholder.com/100x150?text=Photo+Not+Found'\n                    : 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/330px-No-Image-Placeholder.svg.png'\n                }\n                alt={cast.name}\n                />\n              <h4>{cast.name}</h4>\n              <p>Character: {cast.character}</p>\n            </li>\n          ))}\n        </List>\n      )}\n      <ToastContainer autoClose={2000} position=\"top-center\" theme=\"light\" />\n      {error && <p>We don't have cast for this movie </p>}\n      {loader && <Loader />}\n    </>\n  );\n}","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f87210516a7f6fda7a5c975f08793382';\nconst setLanguage = 'en-US'\n\nexport const getTrendMovies = async (page = 1) => {\n  try { \n    const response = await axios.get(\n        `${BASE_URL}trending/movie/day`, {\n            params: {\n              api_key: API_KEY,\n              language: setLanguage,\n              page: page,\n            },\n          });   \n    console.log(response);\n    return response.data; \n  } catch (err) {\n    throw new Error(err.message);\n  }   \n} \n\nexport const getMovieDetails = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }  \n};\n  \nexport const getMovieCredits = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.cast;\n  } catch (err) {\n    throw new Error(err.message);\n  } \n};\n  \nexport const getMovieReviews = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.results;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n  \nexport const getSearchMovie = async (query, page = 1) => {    \n  try { \n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n        query: query,\n        page: page,\n      },\n    });\n    console.log(response.data);    \n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n"],"names":["List","styled","customId","Cast","useState","casts","setCasts","error","setError","loader","setLoader","movieId","useParams","useEffect","getMovieCredits","length","toast","toastId","console","log","fetchCasts","map","cast","src","profile_path","alt","name","character","cast_id","autoClose","position","theme","Loader","BASE_URL","API_KEY","setLanguage","getTrendMovies","page","axios","params","api_key","language","response","data","Error","message","getMovieDetails","id","getMovieReviews","results","getSearchMovie","query"],"sourceRoot":""}