{"version":3,"file":"static/js/387.5df548ae.chunk.js","mappings":"kRAEaA,E,QAAOC,GAAAA,GAAH,4H,6BCOXC,EAAW,gBAEF,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAvBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,8GAE0BC,EAAAA,EAAAA,IAAgBH,GAF1C,UAG2B,KADjBI,EAFV,QAGgBC,OAHhB,uBAIMN,GAAS,GACTO,EAAAA,GAAAA,KAAW,8BAA+B,CACxCC,QAAShB,IANjB,0BASII,EAAUS,GATd,kDAWII,QAAQC,IAAR,MAXJ,yBAaIZ,GAAU,GAbd,8EAHc,sBACdA,GAAU,GADI,mCAmBda,EACD,GAAE,CAACV,KAIF,iCACE,SAACX,EAAD,UACGK,EAAOiB,KAAI,SAAAjB,GAAM,OAChB,2BACE,qCAAaA,EAAOkB,WACpB,uBAAIlB,EAAOmB,YAFJnB,EAAOoB,GADA,OAOpB,SAAC,KAAD,CAAgBC,UAAW,IAAMC,SAAS,aAAaC,MAAM,UAC5DnB,IAAS,gEACTF,IAAU,SAACsB,EAAA,QAAD,MAGhB,C,mMCtDKC,EAAW,gCACXC,EAAU,mCACVC,EAAc,QAEPC,EAAc,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEHC,EAAAA,EAAAA,IAAA,UAChBL,EADgB,sBACc,CAC7BM,OAAQ,CACNC,QAASN,EACTO,SAAUN,EACVE,KAAMA,KAPU,cAEpBK,EAFoB,OAU1BpB,QAAQC,IAAImB,GAVc,kBAWnBA,EAASC,MAXU,sCAapB,IAAIC,MAAM,KAAIC,SAbM,yDAAH,qDAiBdC,EAAe,mCAAG,WAAMlB,GAAN,gGAEJU,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8BL,GAAM,CACzDW,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,MARW,sCAUrB,IAAIC,MAAM,KAAIC,SAVO,yDAAH,sDAcfE,EAAe,mCAAG,WAAMnB,GAAN,gGAEJU,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8BL,EAA9B,YAA4C,CACjEW,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,KAAKK,MARM,sCAUrB,IAAIJ,MAAM,KAAIC,SAVO,yDAAH,sDAcf5B,EAAe,mCAAG,WAAMW,GAAN,gGAEJU,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8BL,EAA9B,YAA4C,CACjEW,OAAQ,CACNC,QAASN,EACTO,SAAUN,KALa,cAErBO,EAFqB,yBAQpBA,EAASC,KAAKM,SARM,sCAUrB,IAAIL,MAAM,KAAIC,SAVO,yDAAH,sDAcfK,EAAc,mCAAG,WAAOC,GAAP,4FAAcd,EAAd,+BAAqB,EAArB,kBAEHC,EAAAA,EAAAA,IAAA,UAAaL,EAAb,gBAAqC,CAC1DM,OAAQ,CACNC,QAASN,EACTO,SAAUN,EACVgB,MAAOA,EACPd,KAAMA,KAPgB,cAEpBK,EAFoB,OAU1BpB,QAAQC,IAAImB,EAASC,MAVK,kBAWnBD,EAASC,MAXU,sCAapB,IAAIC,MAAM,KAAIC,SAbM,yDAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding-bottom: 40px;\n  margin-right: 10px;\n`;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { List } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\nimport { getMovieReviews } from 'services/movieApi';\n\nconst customId = \"custom-id-yes\";\n\nexport default function Reviews() {\n  const [review, setReview] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  // console.log(movieId);\n\n  useEffect(() => {\n    setLoader(true);\n\n    async function fetchReviews() {\n      try {\n        const reviews = await getMovieReviews(movieId);\n        if (reviews.length === 0) {\n          setError(true);\n          toast.warn('Sorry, there are no reviews', {\n            toastId: customId}); \n          return;        \n        }\n        setReview(reviews);        \n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);        \n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  \n  return (\n    <>       \n      <List>\n        {review.map(review => (\n          <li key={review.id}>\n            <h4>Author: {review.author}</h4>\n            <p>{review.content}</p>\n          </li>\n        ))}        \n      </List>\n      <ToastContainer autoClose={2000} position=\"top-center\" theme=\"light\" />      \n      {error && <p>We don't have reviews for this movie</p> }  \n      {loader && <Loader /> } \n    </>\n  );\n}","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f87210516a7f6fda7a5c975f08793382';\nconst setLanguage = 'en-US'\n\nexport const getTrendMovies = async (page = 1) => {\n  try { \n    const response = await axios.get(\n        `${BASE_URL}trending/movie/day`, {\n            params: {\n              api_key: API_KEY,\n              language: setLanguage,\n              page: page,\n            },\n          });   \n    console.log(response);\n    return response.data; \n  } catch (err) {\n    throw new Error(err.message);\n  }   \n} \n\nexport const getMovieDetails = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }  \n};\n  \nexport const getMovieCredits = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.cast;\n  } catch (err) {\n    throw new Error(err.message);\n  } \n};\n  \nexport const getMovieReviews = async id => {\n  try { \n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n      },\n    });\n    return response.data.results;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n  \nexport const getSearchMovie = async (query, page = 1) => {    \n  try { \n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: setLanguage,\n        query: query,\n        page: page,\n      },\n    });\n    console.log(response.data);    \n    return response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n"],"names":["List","styled","customId","Reviews","useState","review","setReview","loader","setLoader","error","setError","movieId","useParams","useEffect","getMovieReviews","reviews","length","toast","toastId","console","log","fetchReviews","map","author","content","id","autoClose","position","theme","Loader","BASE_URL","API_KEY","setLanguage","getTrendMovies","page","axios","params","api_key","language","response","data","Error","message","getMovieDetails","getMovieCredits","cast","results","getSearchMovie","query"],"sourceRoot":""}